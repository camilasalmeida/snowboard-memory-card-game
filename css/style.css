
body {
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 90vh;
    background-image: url('https://windybot.com/img/oTxMF6DDqxOjz_7dgcmv.jpg');
    background-size: cover;
}

h1 {
    font-family: 'Russo One', sans-serif;
    font-size: 50px;
    margin-bottom: 20px;
    padding-top: 13px;
    padding-bottom: 15px;
    color: white;
}


.main-content{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    width: 835px;
    height: 900px; 
    margin-top: 40px;
}

.instructions {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    width: 835px;
    height: 900px; 
    font-family: 'Quicksand', sans-serif;
    margin-bottom: 15px;
    color: white;
}

.result-display {
    color: white;
}

.timer {
    color: white;
    padding: 8px;
}

p {
    font-family: 'Russo One', sans-serif;
    color: white;
    font-size: 20px;
}

.container {
    display: flex;
    flex-direction: column;  
    align-items: center;
    width: 1080px;
    height: 1080px;
}

.board {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    width: 1000px;
    height: 900px; 
    margin-bottom: 20px; 
    gap: 10px; 
}

.cards {
    width: 200px;
    height: 200px;
    position: relative;              /* when you apply position relative to an element, it allows you to adjust its position using the top, right, bottom, and left properties, without affecting the layout of other elements.  The space where the element was originally located remains occupied, which means it doesn’t affect the position of surrounding elements. */
    cursor: pointer;                 /* changed cursor to pointer*/
    transform-style: preserve-3d;    /* ensure that the child elements maintain their 3D positions. This allows the 3D transformation effects, such as rotating or flipping cards, to appear as if they are happening in three-dimensional space. In your memory card game, when you flip the cards, you likely want them to rotate along an axis (like the Y-axis) to reveal the other side. If you didn’t use preserve-3d, the card might not appear to rotate correctly, and the effect would be lost.*/
    transition: transform 0.6s;      /*transition */
    
}

.cards:active {
    transform: scale(.97);            /* family of transform utilities: matrix, translate, scale, rotate, skew, or some combination of them. To any transform utility to work, you need to apply the class of transform first, make sure you apply this class first, */
    transition: transform .2s;
    }

 .cards.flipped {                    
     transform: rotateY(180deg);      /* transform: rotate: rotate(), rotateX(), rotateY(), rotateZ(), rotate3d(). */
    }

.front-face, .back-face {
    width: 200px;
    height: 200px;
    position: absolute;
    border: 2px solid rgba(247, 244, 246, 0.941);
    backface-visibility: hidden;       /* back visibility property controls the reverse sight of just active. Keeping it visible will conflict with the 3d layers. */
}

.front-face {                           /*hide front face*/
    transform: rotateY(180deg);
}

.cards:hover {
    background-color: #f0f0f0; 
    
}

.restart-button{
    display: flex;
    flex-direction:row;
    justify-content: center;
    align-items: center;
    width: 835px;
    height: 900px; 
}

.restart {
    font-family: 'Russo One', sans-serif;
    width: 220px;
    height: 50px;
    background-color: #ff5733;
    color: white;
    border: none;
    margin-bottom: 10px;
    padding: 15px 30px;
    border-radius: 30px;
    cursor: pointer;
    font-size: 20px;
    transition: background-color 0.3s ease;
}

.restart:hover {
    background-color: #df2459; 
}

/*---------Added-----*/
audio {
    display: none;
  }

#button {
    font-size: 16px;
    color: #eee;
    position: absolute;
    width: 50px;
    padding: 15px;
    border: none;
    border: none;
    border-radius: 4px;
    background: rgba(121, 79, 165, 0.8);
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);
    opacity: 0.7;
    cursor: pointer;
    transition: all 0.4s ease-out;
}

#button.fade:hover {
    opacity: 0.8;
  }

  .fade {
    opacity: 0.2;
    top: 0;
    left: 0;
    transform: translate(0, 0);
  }

  /*-------added snow------*/

  @keyframes snowfall {
    0% { transform: translateY(-100px); }
    100% { transform: translateY(100vh); }
} 

#snowfall {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; 
}

.snowflake {
    position: absolute;
    color: #fff;
    font-size: 10px;
    opacity: 0.5;
    user-select: none;
    pointer-events: none; 
}

@keyframes snowfall {
    0% {
        transform: translateY(-100px);
    }
    100% {
        transform: translateY(100vh);
    }
}